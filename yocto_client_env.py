import asyncio
import argparse

#  uv run python ./yocto_client.py

from fastmcp import Client
from fastmcp.client.logging import LogMessage
import os
import os
from fastmcp.client.transports import StdioTransport
from pprint import pprint



async def log_handler(message: LogMessage):
    level = message.level.upper()
    logger = message.logger or 'server'
    data = message.data
    print(f"[{level}] {logger}: {data}")

def parse_args():
    parser = argparse.ArgumentParser(description="Yocto MCP client")
    parser.add_argument(
        "--list-tool",
        action="store_true",
        help="List available MCP tools and exit",
    )
    parser.add_argument(
        "--bitbake",
        type=str,
        help="Name of the recipe to build",
    )
    return parser.parse_args()


async def run_client(args):
    #required_vars = ["BBPATH", "PYTHONPATH"]
    #env = {
    #    var: os.environ[var] 
    #    for var in required_vars 
    #    if var in os.environ
    #}
    # Pass all environment variables
    env = dict(os.environ)
    transport = StdioTransport(
        command="uv",
        args=["run", "python", "yocto_server.py"],
        env=env,
        keep_alive=False,
    )
    client = Client(transport, log_handler=log_handler)
    #client = Client("yocto_server.py", log_handler=log_handler)
    print(f'Client ENV: {os.environ.get("BBPATH")}')

    async with client:
        print(await client.ping())
        # If only listing tools, print and exit early
        if getattr(args, "list_tool", False):
            tools = await client.list_tools()
            print("Tools:")
            names: list[str] = []
            try:
                if hasattr(tools, "tools"):
                    items = tools.tools
                elif isinstance(tools, dict):
                    items = tools.get("tools") or tools.get("data") or []
                elif isinstance(tools, (list, tuple)):
                    items = tools
                else:
                    items = [tools]
                for t in items:
                    name = getattr(t, "name", None)
                    if not name and isinstance(t, dict):
                        name = t.get("name")
                    names.append(name or str(t))
            except Exception:
                names = [str(tools)]
            for n in names:
                print(f" - {n}")
            return
        # Otherwise continue with existing demo flow
        tools = await client.list_tools()
        print("Tools:", tools)
        # Generated by Copilot
        def print_result(res):
            print(f"Result format {type(res)}")
            print("Result (raw):", res)
            print("\nResult (structured):")
            if hasattr(res, "structured_content") and res.structured_content:
                pprint(res.structured_content)
            elif hasattr(res, "content") and res.content:
                for c in res.content:
                    print(f"Type: {getattr(c, 'type', None)}")
                    print(f"Text: {getattr(c, 'text', None)}")
            elif hasattr(res, "data") and res.data:
                pprint(res.data)
            else:
                print(res)

        #res = await client.call_tool("yocto_build_image", {"recipe": "kernel"})
        recipe = "sera-demo"
        if args.bitbake:
            recipe = args.bitbake
        res = await client.call_tool("run_bitbake", {"recipe": recipe})
        print_result(res)
        #res = await client.call_tool("get_recipe_build_log_dir", {"recipe": "sera-demo"})
        #print_result(res)

if __name__ == "__main__":
    args = parse_args()
    asyncio.run(run_client(args))
